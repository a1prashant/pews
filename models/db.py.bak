# -*- coding: utf-8 -*-

# -------------------------------------------------------------------------
# AppConfig configuration made easy. Look inside private/appconfig.ini
# Auth is for authenticaiton and access control
# -------------------------------------------------------------------------
from gluon.contrib.appconfig import AppConfig
from gluon.tools import Auth

# -------------------------------------------------------------------------
# This scaffolding model makes your app work on Google App Engine too
# File is released under public domain and you can use without limitations
# -------------------------------------------------------------------------

if request.global_settings.web2py_version < "2.15.5":
    raise HTTP(500, "Requires web2py 2.15.5 or newer")

# -------------------------------------------------------------------------
# if SSL/HTTPS is properly configured and you want all HTTP requests to
# be redirected to HTTPS, uncomment the line below:
# -------------------------------------------------------------------------
# request.requires_https()

# -------------------------------------------------------------------------
# once in production, remove reload=True to gain full speed
# -------------------------------------------------------------------------
configuration = AppConfig(reload=True)

if not request.env.web2py_runtime_gae:
    # ---------------------------------------------------------------------
    # if NOT running on Google App Engine use SQLite or other DB
    # ---------------------------------------------------------------------
    db = DAL(configuration.get('db.uri'),
             pool_size=configuration.get('db.pool_size'),
             migrate_enabled=configuration.get('db.migrate'),
             check_reserved=['all'])
else:
    # ---------------------------------------------------------------------
    # connect to Google BigTable (optional 'google:datastore://namespace')
    # ---------------------------------------------------------------------
    db = DAL('google:datastore+ndb')
    # ---------------------------------------------------------------------
    # store sessions and tickets there
    # ---------------------------------------------------------------------
    session.connect(request, response, db=db)
    # ---------------------------------------------------------------------
    # or store session in Memcache, Redis, etc.
    # from gluon.contrib.memdb import MEMDB
    # from google.appengine.api.memcache import Client
    # session.connect(request, response, db = MEMDB(Client()))
    # ---------------------------------------------------------------------

# -------------------------------------------------------------------------
# by default give a view/generic.extension to all actions from localhost
# none otherwise. a pattern can be 'controller/function.extension'
# -------------------------------------------------------------------------
response.generic_patterns = [] 
if request.is_local and not configuration.get('app.production'):
    response.generic_patterns.append('*')

# -------------------------------------------------------------------------
# choose a style for forms
# -------------------------------------------------------------------------
response.formstyle = 'bootstrap4_inline'
response.form_label_separator = ''

# -------------------------------------------------------------------------
# (optional) optimize handling of static files
# -------------------------------------------------------------------------
# response.optimize_css = 'concat,minify,inline'
# response.optimize_js = 'concat,minify,inline'

# -------------------------------------------------------------------------
# (optional) static assets folder versioning
# -------------------------------------------------------------------------
# response.static_version = '0.0.0'

# -------------------------------------------------------------------------
# Here is sample code if you need for
# - email capabilities
# - authentication (registration, login, logout, ... )
# - authorization (role based authorization)
# - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)
# - old style crud actions
# (more options discussed in gluon/tools.py)
# -------------------------------------------------------------------------

auth = Auth(db)
# auth.define_tables(username=False, signature=False)


# host names must be a list of allowed host names (glob syntax allowed)
auth = Auth(db, host_names=configuration.get('host.names'))

# -------------------------------------------------------------------------
# create all tables needed by auth, maybe add a list of extra fields
# -------------------------------------------------------------------------
auth.settings.extra_fields['auth_user'] = []
auth.define_tables(username=False, signature=False)

#####################################################################################
# Prashant tried this - and it works, but 
# from gluon.contrib.login_methods.rpx_account import RPXAccount
# auth.settings.actions_disabled=['register', 'change_password', 'request_reset_password']
#auth.settings.login_form = RPXAccount(request,
#    api_key='----take this again from the janrain.com with prashants account---',
#    domain='pewsindia',
#    url = "/%s/default/user/login" % request.application)
#####################################################################################


# -------------------------------------------------------------------------
# configure email
# -------------------------------------------------------------------------
mail = auth.settings.mailer
mail.settings.server = 'logging' if request.is_local else configuration.get('smtp.server')
mail.settings.sender = configuration.get('smtp.sender')
mail.settings.login = configuration.get('smtp.login')
mail.settings.tls = configuration.get('smtp.tls') or False
mail.settings.ssl = configuration.get('smtp.ssl') or False

# -------------------------------------------------------------------------
# configure auth policy
# -------------------------------------------------------------------------
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.settings.reset_password_requires_verification = True

# -------------------------------------------------------------------------  
# read more at http://dev.w3.org/html5/markup/meta.name.html               
# -------------------------------------------------------------------------
response.meta.author = configuration.get('app.author')
response.meta.description = configuration.get('app.description')
response.meta.keywords = configuration.get('app.keywords')
response.meta.generator = configuration.get('app.generator')

# -------------------------------------------------------------------------
# your http://google.com/analytics id                                      
# -------------------------------------------------------------------------
response.google_analytics_id = configuration.get('google.analytics_id')

# -------------------------------------------------------------------------
# maybe use the scheduler
# -------------------------------------------------------------------------
if configuration.get('scheduler.enabled'):
    from gluon.scheduler import Scheduler
    scheduler = Scheduler(db, heartbeat=configure.get('heartbeat'))

# -------------------------------------------------------------------------
# Define your tables below (or better in another model file) for example
#
# >>> db.define_table('mytable', Field('myfield', 'string'))
#
# Fields can be 'string','text','password','integer','double','boolean'
#       'date','time','datetime','blob','upload', 'reference TABLENAME'
# There is an implicit 'id integer autoincrement' field
# Consult manual for more options, validators, etc.
#
# More API examples for controllers:
#
# >>> db.mytable.insert(myfield='value')
# >>> rows = db(db.mytable.myfield == 'value').select(db.mytable.ALL)
# >>> for row in rows: print row.id, row.myfield
# -------------------------------------------------------------------------

# -------------------------------------------------------------------------
# after defining tables, uncomment below to enable auditing
# -------------------------------------------------------------------------
# auth.enable_record_versioning(db)

db.define_table( 'quickNotes',
                Field('note', 'string'
                    , length=200
                    , comment="max 200 characters"
                    , required=True
                    , requires=IS_NOT_EMPTY()
                    , widget=SQLFORM.widgets.text.widget
                    )
                , Field('created_on', 'datetime'
                    , default=request.now
                    , update=request.now
                    , required=True
                    , writable=False
                    , readable=False
                    )
                , Field('created_by', 'reference auth_user'
                    , default=auth.user_id
                    , update=auth.user_id
                    , writable=False
                    , readable=False
                    )
               )


db.define_table( 'jobs_domain',
                Field( 'domain_name', 'string'
                      , length=30
                      , unique=True
                      , requires=IS_NOT_IN_DB(db, 'jobs_domain.domain_name')
                     )
                )

if db(db.jobs_domain).isempty() :
    db.jobs_domain.bulk_insert([
            {'domain_name':'Banking'}
            , {'domain_name':'Civil'}
            , {'domain_name':'Defence'}
            , {'domain_name':'Entertainment'}
            , {'domain_name':'Education'}
            , {'domain_name':'Engineering'}
            , {'domain_name':'Finance'}
            , {'domain_name':'Govt'}
            , {'domain_name':'Hospitality'}
            , {'domain_name':'Industrial'}
            , {'domain_name':'Labour'}
            , {'domain_name':'Legal'}
            , {'domain_name':'Literature'}
            , {'domain_name':'Management'}
            , {'domain_name':'Matrimonial'}
            , {'domain_name':'Media'}
            , {'domain_name':'Medical'}
            , {'domain_name':'NGO'}
            , {'domain_name':'Other'}
            , {'domain_name':'Political'}
            , {'domain_name':'Publication'}
            , {'domain_name':'Religious'}
            , {'domain_name':'Services'}
            , {'domain_name':'Social'}
            , {'domain_name':'Software'}
            , {'domain_name':'Sport'}
            , {'domain_name':'Technical'}
            , {'domain_name':'Tours and Travel'}
            , {'domain_name':'Transport'}
    ])

db.define_table( 'jobs',
                Field( 'title', 'string'
                      , length=70
                      , required=True
                      , requires=IS_NOT_EMPTY()
                     )
                , Field( 'category'
                        , length=30
                        , required=True
                        , requires=IS_IN_DB(db, 'jobs_domain.domain_name')
                        )
                , Field( 'sub_category', 'string'
                        , length=30
                        , required=True
                        )
                , Field( 'description', 'string'
                        , required=True
                        , requires=IS_NOT_EMPTY()
                        , widget=SQLFORM.widgets.text.widget
                        )
                , Field('created_on', 'datetime'
                    , default=request.now
                    , update=request.now
                    , required=True
                    , writable=False
                    , readable=False
                    )
                , Field('created_by', 'reference auth_user'
                    , default=auth.user_id
                    , update=auth.user_id
                    , writable=False
                    , readable=False
                    )
                , Field( 'forFreshers', 'boolean'
                        , label="Yes, Freshers can apply!"
                        , default=False
                       )
                , Field( 'selfAuthenticated', 'boolean'
                        , label="Yes, I authenticate this Job post. I know it is a true job post and not fake!"
                        , default=False
                        , readable=False
                       )
                , Field( 'canContactMe', 'boolean'
                        , label="Can contact me for more details? (Your e-mail and/or mobile will be visible to viewer)"
                        , default=False
                        )
               )

db.define_table( 'articles',
                Field( 'title', 'string'
                      , length=120
                      , required=True
                      , requires=IS_NOT_EMPTY()
                     )
                , Field( 'category'
                        , length=30
                        , required=True
                        , requires=IS_IN_DB(db, 'article.domain_name')
                        )
                , Field( 'sub_category', 'string'
                        , length=30
                        , required=True
                        )
                , Field( 'description', 'string'
                        , required=True
                        , requires=IS_NOT_EMPTY()
                        , widget=SQLFORM.widgets.text.widget
                        )
                , Field('created_on', 'datetime'
                    , default=request.now
                    , update=request.now
                    , required=True
                    , writable=False
                    , readable=False
                    )
                , Field('created_by', 'reference auth_user'
                    , default=auth.user_id
                    , update=auth.user_id
                    , writable=False
                    , readable=False
                    )
                , Field( 'selfAuthenticated', 'boolean'
                        , label="Information given in this article is authenticate and is owned by me."
                        , default=False
                        , readable=False
                       )
                , Field( 'canContactMe', 'boolean'
                        , label="Can contact me for more details? (Your e-mail and/or mobile will be visible to viewer)"
                        , default=False
                        )
               )

# the two fields 'created_on' and 'created_by' are problem for DRY
                # check inheritance etc, if possible
